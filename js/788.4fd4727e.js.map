{"version":3,"file":"js/788.4fd4727e.js","mappings":"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","sources":["webpack://chat/./node_modules/core-js/internals/define-built-in-accessor.js","webpack://chat/./node_modules/core-js/internals/regexp-flags.js","webpack://chat/./node_modules/core-js/modules/es.regexp.flags.js","webpack://chat/./src/views/chat.vue","webpack://chat/./src/components/ChatMessage.vue","webpack://chat/./src/components/ChatMessage.vue?7c5f","webpack://chat/./src/methods/tpd.js","webpack://chat/./src/methods/eventapi.js","webpack://chat/./src/methods/chat.js","webpack://chat/./src/methods/twitch.js","webpack://chat/./src/views/chat.vue?33e7"],"sourcesContent":["var makeBuiltIn = require('../internals/make-built-in');\nvar defineProperty = require('../internals/object-define-property');\n\nmodule.exports = function (target, name, descriptor) {\n  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });\n  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });\n  return defineProperty.f(target, name, descriptor);\n};\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.hasIndices) result += 'd';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.unicodeSets) result += 'v';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var global = require('../internals/global');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar regExpFlags = require('../internals/regexp-flags');\nvar fails = require('../internals/fails');\n\n// babel-minify and Closure Compiler transpiles RegExp('.', 'd') -> /./d and it causes SyntaxError\nvar RegExp = global.RegExp;\nvar RegExpPrototype = RegExp.prototype;\n\nvar FORCED = DESCRIPTORS && fails(function () {\n  var INDICES_SUPPORT = true;\n  try {\n    RegExp('.', 'd');\n  } catch (error) {\n    INDICES_SUPPORT = false;\n  }\n\n  var O = {};\n  // modern V8 bug\n  var calls = '';\n  var expected = INDICES_SUPPORT ? 'dgimsy' : 'gimsy';\n\n  var addGetter = function (key, chr) {\n    // eslint-disable-next-line es-x/no-object-defineproperty -- safe\n    Object.defineProperty(O, key, { get: function () {\n      calls += chr;\n      return true;\n    } });\n  };\n\n  var pairs = {\n    dotAll: 's',\n    global: 'g',\n    ignoreCase: 'i',\n    multiline: 'm',\n    sticky: 'y'\n  };\n\n  if (INDICES_SUPPORT) pairs.hasIndices = 'd';\n\n  for (var key in pairs) addGetter(key, pairs[key]);\n\n  // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\n  var result = Object.getOwnPropertyDescriptor(RegExpPrototype, 'flags').get.call(O);\n\n  return result !== expected || calls !== expected;\n});\n\n// `RegExp.prototype.flags` getter\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nif (FORCED) defineBuiltInAccessor(RegExpPrototype, 'flags', {\n  configurable: true,\n  get: regExpFlags\n});\n","<template>\r\n    <div id=\"chat\">\r\n      <ChatMessage v-for=\"mes in Messages\" :key=\"mes\" :Emotes=\"Emotes\" :GlobalBadges=\"GlobalBadges\" :Paints=\"Paints\" :OtherBadges=\"OtherBadges\" :defaultColors=\"defaultColors\" :payload=\"mes\" :BG=\"mes.BG\"/>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\n  // значки ффз (и чаттерино?)\r\n\r\n  import ChatMessage from '@/components/ChatMessage.vue'\r\n  import apis from '@/methods/tpd.js'\r\n  import EventApi from '@/methods/eventapi.js'\r\n  import Twitch from '@/methods/twitch.js'\r\n  import Common from '@/methods/common'\r\n  \r\n  export default {\r\n    name: 'chat-page',\r\n    components: {\r\n      ChatMessage\r\n  },\r\n    data() {\r\n      return {\r\n        EventApi: null,\r\n\r\n        // settings:\r\n        // value: selectedValue || defaultValue\r\n        paintsEnabled: this.$route.query.paints || \"1\",\r\n        font_size: this.$route.query.font_size || \"18\",\r\n        // value: selectedValue != off (true by default)\r\n        altBG: this.$route.query.altbg != \"0\",\r\n        BG: this.$route.query.background || \"#2b2b2b\",\r\n        BG2: \"\",\r\n        useEventAPI: this.$route.query.eventapi != \"0\",\r\n\r\n        // other:\r\n        channel: this.$route.query.channel,\r\n        currBG: true,\r\n        IsDisconnected: false,\r\n        Emotes: [],\r\n        GlobalBadges: [],\r\n        OtherBadges: [],\r\n        Paints: [],\r\n        channelID: null,\r\n        client: null,\r\n        Messages: [],\r\n        defaultColors: [\"#4242f7\", \"#ff7f50\", \"#1e90ff\", \"#00ff7f\", \"#9acd32\", \"#008000\", \"#ff4500\", \"#ff0000\", \"#daa520\", \"#ff69b4\", \"#5f9ea0\", \"#2e8b57\", \"#d2691e\", \"#a065d7\", \"#b22222\"],\r\n      }\r\n    },\r\n    updated() {\r\n      window.scrollTo(0,document.body.scrollHeight);\r\n      if (this.Messages.length > 50) {\r\n        this.Messages.shift()\r\n      }\r\n    },\r\n    methods: {\r\n      onEmoteDelete(e) {\r\n        this.Emotes = this.Emotes.filter(item => item.ID !== e.old_value.id)\r\n      },\r\n      onEmoteAdd(e) {\r\n        this.Emotes.push({\"Name\": e.value.name, \"ID\": e.value.id, \"Type\": \"7TV\"})\r\n      },\r\n      onEmoteRename(e) {\r\n        for (let emote of this.Emotes) {\r\n          if (emote.ID == e.value.id) {\r\n            emote.Name = e.value.name\r\n          }\r\n        }\r\n        this.Emotes.push({\"Name\": e.value.name, \"ID\": e.value.id, \"Type\": \"7TV\"})\r\n      },\r\n      async onUserID(id) {\r\n          console.log(this.channelID)\r\n          if (this.channelID == null) {\r\n            this.channelID = id\r\n            let subs = await apis.getSubscriberBadges(this.channelID)\r\n            if (subs) {\r\n              this.GlobalBadges[\"subscriber\"] = subs\r\n              console.log(\"loaded sub badges\")\r\n            }\r\n            let stv = await apis.get7tvEmotes(this.channelID)\r\n            console.log(\"loaded seventv channel\")\r\n            this.Emotes = this.Emotes.concat(stv[0])\r\n            this.Emotes = this.Emotes.concat(await apis.getBttvEmotes(this.channelID))\r\n\r\n            // initializing event api\r\n            if (this.useEventAPI) {\r\n              this.EventApi = new EventApi(stv[1], this.channelID, this.onEmoteDelete, this.onEmoteAdd, this.onEmoteRename)\r\n              this.EventApi.Connect()\r\n            }\r\n          }\r\n        }\r\n    },\r\n    created: async function() {\r\n        // check for bg:\r\n        if (this.BG != \"#2b2b2b\" && this.BG != \"transparent\") {\r\n          this.BG = \"#\" + this.BG\r\n        }\r\n\r\n        // alt bg creation:\r\n        if (this.altBG && this.BG != \"transparent\") {\r\n          let minus = 1\r\n          let gray = Common.toGray(this.BG) \r\n          if (gray > 0.38) {\r\n            minus = -30/gray\r\n          }\r\n          this.BG2 = Common.pSBC(0.01*minus, this.BG)\r\n        } else if (this.BG == \"transparent\") {\r\n          this.BG2 = \"transparent\"\r\n        }\r\n\r\n        // creating websocket\r\n        this.client = new Twitch(this.channel);\r\n\r\n        this.client.OnUserId = this.onUserID\r\n        this.client.OnPrivateMessage = async (payload) => {\r\n          payload.BG = this.BG\r\n          if (this.altBG) {\r\n            payload.BG = this.currBG ? this.BG : this.BG2\r\n            this.currBG = !this.currBG\r\n          }\r\n          // payload.tags.color = undefined\r\n          this.Messages.push(payload)\r\n        }\r\n        this.client.OnClearChat = async (payload) => {\r\n          this.Messages = this.Messages.filter(item => item.source.nick !== payload.parameters)\r\n        }\r\n        this.client.OnClearMessage = async (payload) => {\r\n          this.Messages = this.Messages.filter(item => item.tags[\"id\"] !== payload.tags[\"target-msg-id\"])\r\n        }\r\n\r\n        this.client.connect()\r\n        // getting data\r\n\r\n        try {\r\n          let userid = await apis.getUserID(this.channel)\r\n          await this.onUserID(userid)\r\n        } catch (error) {\r\n          // pass\r\n        }\r\n\r\n        this.Emotes = this.Emotes.concat(await apis.get7tvGlobalEmotes())\r\n        console.log(\"loaded 7tv global emotes\")\r\n        this.Emotes = this.Emotes.concat(await apis.getBttvGlobalEmotes())\r\n        console.log(\"loaded bttv global emotes\")\r\n        this.Emotes = this.Emotes.concat(await apis.getFfzEmotes(this.channel))\r\n        console.log(\"loaded ffz channel emotes\")\r\n        this.Emotes = this.Emotes.concat(await apis.getFfzGlobalEmotes())\r\n        console.log(\"loaded ffz global emotes\")\r\n\r\n        let gb = await apis.getGlobalBadges()\r\n        if (this.GlobalBadges[\"subscriber\"]) {\r\n          gb[\"subscriber\"] = this.GlobalBadges[\"subscriber\"]\r\n        }\r\n        this.GlobalBadges = gb\r\n\r\n        let bp = await apis.get7tvBadgesPaints()\r\n        this.OtherBadges = bp[0]\r\n        this.OtherBadges.unshift({\"Users\": [\"407046453\"], \"Url\": \"https://i.imgur.com/qgO1Y7A.png\"}) // custom badges )))\r\n        this.OtherBadges.unshift({\"Users\": [\"521810742\"], \"Url\": \"https://cdn.7tv.app/emote/63d6ed00349f81ba10452fdd/2x.webp\"})\r\n        this.OtherBadges.unshift({\"Users\": [\"69078167\"], \"Url\": \"https://i.imgur.com/nIm3MvW.gif\"})\r\n        this.OtherBadges.unshift({\"Users\": [\"489131898\"], \"Url\": \"https://i.imgur.com/Kg7X4ga.gif\"})\r\n        this.Paints = bp[1]\r\n    }\r\n  }\r\n</script>\r\n  \r\n<style>\r\n  body {\r\n    margin: 0px;\r\n    overflow: hidden;\r\n  }\r\n  #chat {\r\n    position: absolute;\r\n    width: 100%;\r\n    padding: 0;\r\n\r\n    overflow: hidden;\r\n  }\r\n</style>\r\n  ","<template>\n    <div class=\"ChatMessage\">\n      <div v-for=\"badge in Badges\" :key=\"badge\" class=\"Badge\">\n          <img :src=\"badge.Url\">\n      </div>\n      <span>\n        <span :HavePaints=\"HavePaints\" v-if=\"displayName.toLowerCase() == this.payload.source.nick\" class=\"message-nick\" :style=\"{color: color, backgroundImage: bgImage}\">{{ displayName }}: </span>\n        <span :HavePaints=\"HavePaints\" v-if=\"displayName.toLowerCase() != this.payload.source.nick\" class=\"message-nick\" :style=\"{color: color, backgroundImage: bgImage}\">{{this.payload.source.nick}} ({{ displayName }}): </span>\n        <span class=\"message-text\">\n          <template v-for=\"mes in FinalMessage\" :key=\"mes\">\n            <img v-if=\"mes.Type=='emote'\" :src=\"mes.Text\" :ZeroWidth=\"mes.ZeroWidth\">\n            <template v-if=\"mes.Type=='text'\">{{mes.Text}}</template>\n          </template>  \n        </span>\n      </span>\n    </div>\n</template>\n\n<script>\nimport Common from '@/methods/common'\nimport ColourDistance from '@/methods/colour'\n// import twemoji from 'twemoji'\n\nexport default {\n  name: 'ChatMessage',\n  data() {\n    return {\n      EmotesBaseUrl: {\n        \"7TV\": \"https://cdn.7tv.app/emote/{0}/2x.webp\",\n        \"BTTV\": \"https://cdn.betterttv.net/emote/{0}/2x\",\n        \"FFZ\": \"https://cdn.frankerfacez.com/emote/{0}/2\",\n        \"TWITCH\": \"\"\n      },\n      Paint: null,\n      HavePaints: false,\n      displayName: \"\",\n\n      dot : 0,\n\n      Badges: [],\n      paintsEnabled: this.$route.query.paints || \"1\",\n      shadowText: this.$route.query.shadowtext || \"0\",\n      font_size: this.$route.query.font_size || \"18\",\n      interpolateSize: this.$route.query.interpbs != \"0\",\n    }\n  },\n  props: {\n    Emotes: Array,\n    OtherBadges: Array,\n    GlobalBadges: Object,\n    Paints: Array,\n\n    defaultColors: Array,\n\n    payload: Object,\n    BG: String,\n  },\n  created: async function() {\n      if (this.payload.command.command != \"PRIVMSG\") {\n          return {}\n      }\n      this.displayName = this.payload.tags[\"display-name\"]\n      if (this.payload.tags[\"display-name\"] == undefined) {\n        this.displayName = this.payload.user\n      }\n\n      // twitch badges\n      if (this.payload.tags.badges) {\n        for (const [key, value] of Object.entries(this.payload.tags[\"badges\"])) {\n          if (this.GlobalBadges[key]) {\n            this.Badges.push({\"Url\": this.GlobalBadges[key][value]})\n          }\n        }\n      }\n      // parse extension badges\n      if (this.OtherBadges) {\n        for (const value of this.OtherBadges) {\n          if (value.Users.includes(this.payload.tags[\"user-id\"])) {\n            this.Badges.push({\"Url\": value.Url})\n          }\n        }\n      }\n      // 7tv paints\n      if (this.paintsEnabled == \"1\") {\n        for (const value of this.Paints) {\n          if (value.users.includes(this.payload.tags[\"user-id\"])) {\n            this.HavePaints = true\n            this.Paint = value\n            break\n          }\n        }\n      }\n\n      // return {\"User\": {\"Login\": this.payload.user, \"DisplayName\": displayName, \"Color\": color},\n      //         \"Message\": this.payload.message, \"Badges\": Badges}\n  },\n  computed: {\n    color() {\n      let color = this.payload.tags.color\n      if (!this.payload.tags.color) {\n        color = this.defaultColors[Math.floor(Math.random() * this.defaultColors.length)]\n      }\n      // @todo: добавить убавление яркости\n      if (this.BG != \"transparent\") {\n\n        // если сообщение сливается с фоном:\n        let userRGB = Common.hexToRgb(color)\n        let backgroundRGB = Common.hexToRgb(this.BG)\n\n        // схожесть цветов\n        // let distance = Math.sqrt(((userRGB[0] - backgroundRGB[0])**2) + ((userRGB[1] - backgroundRGB[1])**2) + ((userRGB[2] - backgroundRGB[2])**2))\n\n        let userXYZ = ColourDistance.rgb2xyz(userRGB[0], userRGB[1], userRGB[2])\n        let backgroundXYZ = ColourDistance.rgb2xyz(backgroundRGB[0], backgroundRGB[1], backgroundRGB[2])\n\n\n        let distance = ColourDistance.deltaE00(userXYZ[0], userXYZ[1], userXYZ[2], backgroundXYZ[0], backgroundXYZ[1], backgroundXYZ[2]) * 10\n\n        if (distance == 0) {\n          distance = 0.01\n        }\n        if (distance < 0.3) {\n          // значит фон сливается, теперь мы добавляем/убавляем +40% яркость пользователю\n          // let gray = Common.toGray(color)\n          // if (gray > 0.6) {\n          //   let newColor = Common.pSBC(-0.4, color)\n          //   console.log(`Changed ${color} to ${newColor} | distance: ${distance}`)\n          //   return newColor\n          // }\n          // else {\n          let newColor = Common.pSBC(0.2, color)\n          // console.log(`Changed ${color} to ${newColor} | distance: ${distance} | adjust: ${(0.02/distance)*100}`)\n          return newColor\n          // }\n        }\n      }\n      // console.log(`Don't change ${color} | distance: ${distance}`)\n      return color\n    },\n    FinalMessage() {\n      let TempMessage = `${this.payload.parameters}`\n\n      // TempMessage = twemoji.parse(TempMessage)\n\n      let f_mes = Common.textToMessageObject(TempMessage)\n\n      if (this.payload.tags.emotes) {\n        let twitchEmotes = Common.parse_smiles(TempMessage, this.payload.tags[\"emotes\"])\n        for (const [em, url] of Object.entries(twitchEmotes)) {\n          for (const i in f_mes) {\n            if (f_mes[i].Text.slice(0, -1) == em) {\n              f_mes[i].Type = \"emote\"\n              f_mes[i].Text = url\n              f_mes[i].ZeroWidth = false\n            }\n          }\n        }\n      }\n\n      for (const em of this.Emotes) {\n        for (const i in f_mes) {\n          if (f_mes[i].Text.slice(0, -1) == em.Name) {\n            f_mes[i].Type = \"emote\"\n            f_mes[i].Text = this.EmotesBaseUrl[em.Type].replace('{0}', em.ID)\n            f_mes[i].ZeroWidth = em.ZeroWidth\n          }\n        }\n      }\n\n      // for (let m of TempMessage.split(\" \")) {\n      //   m = m.trim()\n\n      //   if (m == \"\") {\n      //     continue\n      //   }\n\n      //   let tw_contains = false\n      //   let tw_emote = []\n      //   if (this.payload.tags.emotes) {\n      //     let tw = Common.getEmoteTwitch(twitchEmotes, m)\n      //     tw_contains = tw[0]\n      //     tw_emote = tw[1]\n      //   }\n\n      //   let gl = Common.getEmote(this.Emotes, m)\n      //   let gl_contains = gl[0]\n      //   let gl_emote = gl[1]\n\n      //   if (tw_contains == true && gl_contains == true) {\n      //     tw_contains = false\n      //   }\n\n      //   switch (true) {\n      //     case tw_contains:\n      //       f_mes.push({\"Type\": \"emote\", \"Text\": tw_emote, \"ZeroWidth\": false})\n      //       break;\n          \n      //     case gl_contains:\n      //       if (gl_emote.ZeroWidth) {\n      //         f_mes.push({\"Type\": \"emote\", \"Text\": this.EmotesBaseUrl[gl_emote.Type].replace('{0}', gl_emote.ID), \"ZeroWidth\": true})\n      //       } else {\n      //         f_mes.push({\"Type\": \"emote\", \"Text\": this.EmotesBaseUrl[gl_emote.Type].replace('{0}', gl_emote.ID), \"ZeroWidth\": false})\n      //       }\n      //       break;\n        \n      //     default:\n      //       f_mes.push({\"Type\": \"text\", \"Text\": m+\" \"})\n      //   }\n      // }\n\n      return f_mes\n    },\n    bgImage() {\n      if (!this.Paint) {\n        return \"\"\n      }\n      const ccsFunc = this.Paint.function\n\n      const args = []\n      switch (this.Paint.function) {\n          case \"linear-gradient\":\n              args.push(`${this.Paint.angle}deg`)\n              break;\n          case \"radial-graient\":\n              args.push(this.Paint.shape ?? \"circle\")\n              break\n          case \"url\":\n              args.push(this.Paint.image_url ?? \"\")\n              break\n      }\n      let funcPrefix = \"\"\n      if (this.Paint.function !== \"URL\") {\n          funcPrefix = this.Paint.repeat ? \"repeating-\" : \"\"\n      }\n      for (const stop of this.Paint.stops) {\n          const color = Common.DecimalToStringRGBA(stop.color)\n          args.push(`${color} ${stop.at * 100}%`)\n      }\n      return `${funcPrefix}${ccsFunc}(${args.join(\", \")})`\n    },\n    filterText() {\n      if (this.shadowText == \"1\") {\n        return \"drop-shadow(-1px 2px 1px #2b2b2b)\"\n      }\n      return \"\"\n    },\n    filter() {\n      try {\n        return this.Paint.drop_shadows\n        .map((v) => `drop-shadow(${v.x_offset}px ${v.y_offset}px ${v.radius}px ${Common.DecimalToStringRGBA(v.color)})`)\n        .join(\" \");\n      } catch (error) {\n        if (this.shadowText == \"1\") {\n          return \"drop-shadow(-1px 2px 1px #2b2b2b)\"\n        }\n        return \"\"\n      }\n    },\n    paintColor() {\n      if (!this.Paint) {\n        return \"\"\n      }\n      return Common.DecimalToStringRGBA(this.Paint.color)\n    },\n    badgeSize() {\n      if (this.interpolateSize && parseInt(this.font_size)) {\n        return Math.round(0.8 * parseInt(this.font_size) + 4.4).toString() + \"px\"\n      }\n      return \"18px\"\n    },\n    emoteSize() {\n      if (this.interpolateSize && parseInt(this.font_size)) {\n        return (parseInt(this.font_size) + 14).toString() + \"px\"\n      }\n      return \"32px\"\n    },\n    messageSize() {\n      if (this.interpolateSize && parseInt(this.font_size)) {\n        return Math.round(1.33 * parseInt(this.font_size) + 7).toString() + \"px\"\n      }\n      return \"31px\"\n    },\n    Font_Size() {\n        return `${this.font_size}px`\n    }\n  }\n}\n</script>\n\n<style>\n  .Badge {\n    display: inline-block;\n    padding-right: 3px;\n  }\n  .Badge img {\n    height: v-bind(badgeSize);\n    /* vertical-align: middle; */\n  }\n  .ChatMessage {\n    padding-top: 3px;\n    padding-bottom: 3px;\n    padding-left: 5px;\n\n    min-height: v-bind(messageSize);\n    font-size: v-bind(Font_Size);\n\n    width: 100%;\n\n    display: inline-block;\n\n    background: v-bind(BG);\n    color: white;\n    border-top: 2px solid black;\n  }\n  .message-text {\n    bottom: 5px;\n    margin-right: 13px;\n    filter: v-bind('filterText');\n  }\n\n  .message-text img, .emoji {\n    height: v-bind(emoteSize);\n    vertical-align: middle;\n    filter: unset;\n  }\n  .message-nick {\n    font-weight: 700;\n\n    background-size: cover;\n    filter: v-bind('filter');\n    color: v-bind('paintColor');\n  }\n  .message-nick[HavePaints=\"true\"] {\n    -webkit-text-fill-color: transparent;\n    -webkit-background-clip: text;\n    background-clip: text !important;\n    background-color: currentcolor;\n  }\n  .message-text img[ZeroWidth=\"true\"] {\n    position: absolute;\n\t\tz-index: 1;\n\t\ttransform: translateX(-100%);\n  }\n</style>\n","import { render } from \"./ChatMessage.vue?vue&type=template&id=bb58f3a0\"\nimport script from \"./ChatMessage.vue?vue&type=script&lang=js\"\nexport * from \"./ChatMessage.vue?vue&type=script&lang=js\"\n\nimport \"./ChatMessage.vue?vue&type=style&index=0&id=bb58f3a0&lang=css\"\n\nimport exportComponent from \"S:\\\\golang\\\\eblanchat3.0\\\\eblanchat\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","// import common from '@/methods/common.js'\r\n\r\n// @todo: сделать таймаут на получение всякой хуеты если произошла ошибка кроме 404\r\n\r\nvar Huita = {\r\n    async getUserID(channel) {\r\n        const response = await fetch(`https://api.ivr.fi/v2/twitch/user?login=${channel}`)\r\n        if (response.ok) {\r\n            console.log(\"IVR API successful, getting user-id...\")\r\n            const json = await response.json()\r\n            return json[0].id\r\n        }\r\n        throw \"Unable to get user id from ivr API!\"\r\n    },\r\n    async getGlobalBadges() {\r\n        try {\r\n            let badges = {}\r\n\r\n            const response = await fetch(\"https://badges.twitch.tv/v1/badges/global/display?language=en\")\r\n            const json = await response.json()\r\n            for (const [key, value] of Object.entries(json[\"badge_sets\"])) {\r\n                let vers = value[\"versions\"]\r\n                let finalVersions = {}\r\n                for (const [key, value] of Object.entries(vers)) {\r\n                    finalVersions[key] = value[\"image_url_2x\"]\r\n                }\r\n                badges[key] = finalVersions\r\n              }\r\n            return badges\r\n        } catch (error) {\r\n            console.log(`Unable to get global badges: ${error}`)\r\n            return {}\r\n        }\r\n    },\r\n    async getSubscriberBadges(user_id) {\r\n        let subscriber = {}\r\n\r\n        const response = await fetch(`https://badges.twitch.tv/v1/badges/channels/${user_id}/display`)\r\n        const json = await response.json()\r\n        if (response.ok && Object.keys(json.badge_sets).length > 0) {\r\n            let vers = json[\"badge_sets\"][\"subscriber\"][\"versions\"]\r\n            let finalVersions = {}\r\n            for (const [key, value] of Object.entries(vers)) {\r\n                finalVersions[key] = value[\"image_url_2x\"]\r\n            }\r\n            subscriber = finalVersions\r\n        }\r\n        return subscriber\r\n    },\r\n    async get7tvBadgesPaints() {\r\n        try {\r\n            let badges = []\r\n            let paints = []\r\n\r\n            const response = await fetch(`https://api.7tv.app/v2/badges?user_identifier=twitch_id`)\r\n            const json = await response.json()\r\n            for (const value of json[\"badges\"]) {\r\n                badges.push({\"Users\": value.users, \"Url\": value.urls[1][1]})\r\n            }\r\n            for (const value of json[\"paints\"]) {\r\n                paints.push(value)\r\n            }\r\n            return [badges, paints]\r\n        } catch (error) {\r\n            console.log(`Unable to get 7tv badges: ${error}`)\r\n            return []\r\n        }\r\n    },\r\n    async get7tvEmotes(user_id) {\r\n        let emotes = []\r\n\r\n        const response = await fetch(`https://7tv.io/v3/users/twitch/${user_id}`)\r\n        if (response.ok) {\r\n            const json = await response.json()\r\n            for (const value of json[\"emote_set\"][\"emotes\"]) {\r\n                emotes.push({\"Name\": value.name, \"ID\": value.id, \"Type\": \"7TV\", \"ZeroWidth\": value.flags == 1})\r\n            }\r\n            return [emotes, json[\"emote_set\"][\"id\"]]\r\n        }\r\n        console.log(`Unable to get 7tv channel emotes`)\r\n        return []\r\n    },\r\n    async get7tvGlobalEmotes() {\r\n        try {\r\n            let emotes = []\r\n\r\n            const response = await fetch(`https://7tv.io/v3/emote-sets/62cdd34e72a832540de95857`)\r\n            const json = await response.json()\r\n            for (const value of json[\"emotes\"]) {\r\n                emotes.push({\"Name\": value.name, \"ID\": value.id, \"Type\": \"7TV\", \"ZeroWidth\": value.flags == 1})\r\n            }\r\n            return emotes\r\n        } catch (error) {\r\n            console.log(`Unable to get 7tv global emotes: ${error}`)\r\n            return []\r\n        }\r\n    },\r\n    async getBttvEmotes(user_id) {\r\n        try {\r\n            let emotes = []\r\n            const response = await fetch(`https://api.betterttv.net/3/cached/users/twitch/${user_id}`)\r\n            const json = await response.json()\r\n            if (json[\"sharedEmotes\"]) {\r\n                for (const value of json[\"sharedEmotes\"]) {\r\n                    emotes.push({\"Name\": value.code, \"ID\": value.id, \"Type\": \"BTTV\"})\r\n                }\r\n            }\r\n            if (json[\"channelEmotes\"]) {\r\n                for (const value of json[\"channelEmotes\"]) {\r\n                    emotes.push({\"Name\": value.code, \"ID\": value.id, \"Type\": \"BTTV\"})\r\n                }\r\n            }\r\n            return emotes\r\n        } catch (error) {\r\n            console.log(`Unable to get bttv emotes: ${error}`)\r\n            return []\r\n        }\r\n    },\r\n    async getBttvGlobalEmotes() {\r\n        try {\r\n            let emotes = []\r\n\r\n            const response = await fetch(`https://api.betterttv.net/3/cached/emotes/global`)\r\n            const json = await response.json()\r\n            for (const value of json) {\r\n                emotes.push({\"Name\": value.code, \"ID\": value.id, \"Type\": \"BTTV\"})\r\n            }\r\n            return emotes\r\n        } catch (error) {\r\n            console.log(`Unable to get bttv global emotes: ${error}`)\r\n            return []\r\n        }\r\n    },\r\n    async getFfzEmotes(channel) {\r\n        try {\r\n            let emotes = []\r\n\r\n            const response = await fetch(`https://api.frankerfacez.com/v1/room/${channel}`)\r\n            const json = await response.json()\r\n            for (const value of json[\"sets\"][json[\"room\"][\"set\"].toString()][\"emoticons\"]) {\r\n                emotes.push({\"Name\": value.name, \"ID\": value.id, \"Type\": \"FFZ\"})\r\n            }\r\n            return emotes\r\n        } catch (error) {\r\n            console.log(`Unable to get FFZ emotes: ${error}`)\r\n            return []\r\n        }\r\n    },\r\n    async getFfzGlobalEmotes() {\r\n        try {\r\n            let emotes = []\r\n\r\n            const response = await fetch(`https://api.frankerfacez.com/v1/set/global`)\r\n            const json = await response.json()\r\n            for (const value of json[\"sets\"][\"3\"][\"emoticons\"]) {\r\n                emotes.push({\"Name\": value.name, \"ID\": value.id, \"Type\": \"FFZ\"})\r\n            }\r\n            return emotes\r\n        } catch (error) {\r\n            console.log(`Unable to get FFZ emotes: ${error}`)\r\n            return []\r\n        }\r\n    },\r\n    // @todo: ffz badges, bttv badges. Maybe add chatterino badges.\r\n}\r\n\r\nexport default Huita","\r\n\r\nclass EventAPI {\r\n    constructor(set_id, user_id, onDelete, onAdd, onRename) {\r\n        this.ws = null\r\n        this.set_id = set_id\r\n        this.user_id = user_id //user_id\r\n        this.onDelete = onDelete\r\n        this.onAdd = onAdd\r\n        this.onRename = onRename\r\n    }\r\n\r\n    Connect() {\r\n        this.ws = new WebSocket(\"wss://events.7tv.io/v3\");\r\n        this.ws.onmessage = (e) => this.onMessage(e)\r\n    }\r\n\r\n    subscribeToEvent(event, cond) {\r\n        let message = {\r\n            \"op\": 35,\r\n            \"d\": {\r\n                \"type\": event,\r\n                \"condition\": cond\r\n            }\r\n        }\r\n        this.ws.send(JSON.stringify(message))\r\n    }\r\n\r\n    onMessage(e) {\r\n        let json = JSON.parse(e.data)\r\n        // console.log(json)\r\n        switch (json.op) {\r\n            case 1: {\r\n                this.subscribeToEvent(\"emote_set.*\", {\"object_id\": this.set_id})\r\n                //other\r\n                const cond = {\r\n                    \"id\": this.user_id,\r\n                    \"ctx\": \"channel\",\r\n                    \"platform\": \"TWITCH\"\r\n                }\r\n                this.subscribeToEvent(\"emote_set.*\", cond)\r\n                // this.subscribeToEvent(\"cosmetic.*\", cond)\r\n                // this.subscribeToEvent(\"cosmetic.*\", {\r\n                //     \"id\": \"407046453\",\r\n                //     \"ctx\": \"user\",\r\n                //     \"platform\": \"TWITCH\"\r\n                // })\r\n                break\r\n            }\r\n            case 0:\r\n                switch (json.d.type) {\r\n                    case \"emote_set.update\":\r\n                        if (json.d.body.pulled) {\r\n                            for (const item of json.d.body.pulled) {\r\n                                this.onDelete(item)\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (json.d.body.pushed) {\r\n                            for (const item of json.d.body.pushed) {\r\n                                this.onAdd(item)\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (json.d.body.updated) {\r\n                            for (const item of json.d.body.updated) {\r\n                                this.onRename(item)\r\n                                break;\r\n                            }\r\n                        }\r\n                }\r\n                // че то произошло\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventAPI","\r\nfunction parseTags(tags) {\r\n    // badge-info=;badges=broadcaster/1;color=#0000FF;...\r\n\r\n    const tagsToIgnore = {  // List of tags to ignore.\r\n        'client-nonce': null,\r\n        'flags': null\r\n    };\r\n\r\n    let dictParsedTags = {};  // Holds the parsed list of tags.\r\n                              // The key is the tag's name (e.g., color).\r\n    let parsedTags = tags.split(';'); \r\n\r\n    parsedTags.forEach(tag => {\r\n        let parsedTag = tag.split('=');  // Tags are key/value pairs.\r\n        let tagValue = (parsedTag[1] === '') ? null : parsedTag[1];\r\n\r\n        switch (parsedTag[0]) {  // Switch on tag name\r\n            case 'badges':\r\n            case 'badge-info':\r\n                // badges=staff/1,broadcaster/1,turbo/1;\r\n\r\n                if (tagValue) {\r\n                    let dict = {};  // Holds the list of badge objects.\r\n                                    // The key is the badge's name (e.g., subscriber).\r\n                    let badges = tagValue.split(','); \r\n                    badges.forEach(pair => {\r\n                        let badgeParts = pair.split('/');\r\n                        dict[badgeParts[0]] = badgeParts[1];\r\n                    })\r\n                    dictParsedTags[parsedTag[0]] = dict;\r\n                }\r\n                else {\r\n                    dictParsedTags[parsedTag[0]] = null;\r\n                }\r\n                break;\r\n            case 'emotes':\r\n                // emotes=25:0-4,12-16/1902:6-10\r\n\r\n                if (tagValue) {\r\n                    let dictEmotes = {};  // Holds a list of emote objects.\r\n                                          // The key is the emote's ID.\r\n                    let emotes = tagValue.split('/');\r\n                    emotes.forEach(emote => {\r\n                        let emoteParts = emote.split(':');\r\n\r\n                        let textPositions = [];  // The list of position objects that identify\r\n                                                 // the location of the emote in the chat message.\r\n                        let positions = emoteParts[1].split(',');\r\n                        positions.forEach(position => {\r\n                            let positionParts = position.split('-');\r\n                            textPositions.push({\r\n                                startPosition: positionParts[0],\r\n                                endPosition: positionParts[1]    \r\n                            })\r\n                        });\r\n\r\n                        dictEmotes[emoteParts[0]] = textPositions;\r\n                    })\r\n\r\n                    dictParsedTags[parsedTag[0]] = dictEmotes;\r\n                }\r\n                else {\r\n                    dictParsedTags[parsedTag[0]] = null;\r\n                }\r\n\r\n                break;\r\n            case 'emote-sets': {\r\n                // emote-sets=0,33,50,237\r\n\r\n                let emoteSetIds = tagValue.split(',');  // Array of emote set IDs.\r\n                dictParsedTags[parsedTag[0]] = emoteSetIds;\r\n                break;\r\n            }\r\n            default:\r\n                // If the tag is in the list of tags to ignore, ignore\r\n                // it; otherwise, add it.\r\n\r\n                if (!Object.prototype.hasOwnProperty.call(tagsToIgnore, parsedTag[0])) { \r\n                    dictParsedTags[parsedTag[0]] = tagValue;\r\n                }\r\n        } \r\n    });\r\n\r\n    return dictParsedTags;\r\n}\r\nfunction parseCommand(rawCommandComponent) {\r\n    let parsedCommand = null;\r\n    let commandParts = rawCommandComponent.split(' ');\r\n\r\n    switch (commandParts[0]) {\r\n        case 'JOIN':\r\n        case 'PART':\r\n        case 'NOTICE':\r\n        case 'CLEARCHAT':\r\n        case 'CLEARMSG':\r\n        case 'HOSTTARGET':\r\n        case 'PRIVMSG':\r\n            parsedCommand = {\r\n                command: commandParts[0],\r\n                channel: commandParts[1]\r\n            }\r\n            break;\r\n        case 'PING':\r\n            parsedCommand = {\r\n                command: commandParts[0]\r\n            }\r\n            break;\r\n        case 'CAP':\r\n            parsedCommand = {\r\n                command: commandParts[0],\r\n                isCapRequestEnabled: (commandParts[2] === 'ACK') ? true : false,\r\n                // The parameters part of the messages contains the \r\n                // enabled capabilities.\r\n            }\r\n            break;\r\n        case 'GLOBALUSERSTATE':  // Included only if you request the /commands capability.\r\n                                 // But it has no meaning without also including the /tags capability.\r\n            parsedCommand = {\r\n                command: commandParts[0]\r\n            }\r\n            break;               \r\n        case 'USERSTATE':   // Included only if you request the /commands capability.\r\n        case 'ROOMSTATE':   // But it has no meaning without also including the /tags capabilities.\r\n            parsedCommand = {\r\n                command: commandParts[0],\r\n                channel: commandParts[1]\r\n            }\r\n            break;\r\n        case 'RECONNECT':  \r\n            parsedCommand = {\r\n                command: commandParts[0]\r\n            }\r\n            break;\r\n        case '421':\r\n            return null;\r\n        case '001':  // Logged in (successfully authenticated). \r\n            parsedCommand = {\r\n                command: commandParts[0],\r\n                channel: commandParts[1]\r\n            }\r\n            break;\r\n        case '002':  // Ignoring all other numeric messages.\r\n        case '003':\r\n        case '004':\r\n        case '353':  // Tells you who else is in the chat room you're joining.\r\n        case '366':\r\n        case '372':\r\n        case '375':\r\n        case '376':\r\n            return null;\r\n        default:\r\n            return null;\r\n    }\r\n\r\n    return parsedCommand;\r\n} \r\nfunction parseSource(rawSourceComponent) {\r\n    if (null == rawSourceComponent) {  // Not all messages contain a source\r\n        return null;\r\n    }\r\n    else {\r\n        let sourceParts = rawSourceComponent.split('!');\r\n        return {\r\n            nick: (sourceParts.length == 2) ? sourceParts[0] : null,\r\n            host: (sourceParts.length == 2) ? sourceParts[1] : sourceParts[0]\r\n        }\r\n    }\r\n}\r\nfunction parseParameters(rawParametersComponent, command) {\r\n    let idx = 0\r\n    let commandParts = rawParametersComponent.slice(idx + 1).trim(); \r\n    let paramsIdx = commandParts.indexOf(' ');\r\n\r\n    if (-1 == paramsIdx) { // no parameters\r\n        command.botCommand = commandParts.slice(0); \r\n    }\r\n    else {\r\n        command.botCommand = commandParts.slice(0, paramsIdx); \r\n        command.botCommandParams = commandParts.slice(paramsIdx).trim();\r\n        // TODO: remove extra spaces in parameters string\r\n    }\r\n\r\n    return command;\r\n}\r\n\r\nvar chat = {\r\n    parseMessage(message) {\r\n\r\n        let parsedMessage = {  // Contains the component parts.\r\n            tags: null,\r\n            source: null,\r\n            command: null,\r\n            parameters: null\r\n        };\r\n    \r\n        // The start index. Increments as we parse the IRC message.\r\n    \r\n        let idx = 0; \r\n    \r\n        // The raw components of the IRC message.\r\n    \r\n        let rawTagsComponent = null;\r\n        let rawSourceComponent = null; \r\n        let rawCommandComponent = null;\r\n        let rawParametersComponent = null;\r\n    \r\n        // If the message includes tags, get the tags component of the IRC message.\r\n    \r\n        if (message[idx] === '@') {  // The message includes tags.\r\n            let endIdx = message.indexOf(' ');\r\n            rawTagsComponent = message.slice(1, endIdx);\r\n            idx = endIdx + 1; // Should now point to source colon (:).\r\n        }\r\n    \r\n        // Get the source component (nick and host) of the IRC message.\r\n        // The idx should point to the source part; otherwise, it's a PING command.\r\n    \r\n        if (message[idx] === ':') {\r\n            idx += 1;\r\n            let endIdx = message.indexOf(' ', idx);\r\n            rawSourceComponent = message.slice(idx, endIdx);\r\n            idx = endIdx + 1;  // Should point to the command part of the message.\r\n        }\r\n    \r\n        // Get the command component of the IRC message.\r\n    \r\n        let endIdx = message.indexOf(':', idx);  // Looking for the parameters part of the message.\r\n        if (-1 == endIdx) {                      // But not all messages include the parameters part.\r\n            endIdx = message.length;                 \r\n        }\r\n    \r\n        rawCommandComponent = message.slice(idx, endIdx).trim();\r\n    \r\n        // Get the parameters component of the IRC message.\r\n    \r\n        if (endIdx != message.length) {  // Check if the IRC message contains a parameters component.\r\n            idx = endIdx + 1;            // Should point to the parameters part of the message.\r\n            rawParametersComponent = message.slice(idx);\r\n        }\r\n    \r\n        // Parse the command component of the IRC message.\r\n    \r\n        parsedMessage.command = parseCommand(rawCommandComponent);\r\n    \r\n        // Only parse the rest of the components if it's a command\r\n        // we care about; we ignore some messages.\r\n    \r\n        if (null == parsedMessage.command) {  // Is null if it's a message we don't care about.\r\n            return null; \r\n        }\r\n        else {\r\n            if (null != rawTagsComponent) {  // The IRC message contains tags.\r\n                parsedMessage.tags = parseTags(rawTagsComponent);\r\n            }\r\n    \r\n            parsedMessage.source = parseSource(rawSourceComponent);\r\n    \r\n            parsedMessage.parameters = rawParametersComponent;\r\n            if (rawParametersComponent && rawParametersComponent[0] === '!') {  \r\n                // The user entered a bot command in the chat window.            \r\n                parsedMessage.command = parseParameters(rawParametersComponent, parsedMessage.command);\r\n            }\r\n        }\r\n\r\n        if (parsedMessage.parameters) {\r\n            parsedMessage.parameters = parsedMessage.parameters.replace(\"\u0001ACTION\", \"\")\r\n            parsedMessage.parameters = parsedMessage.parameters.replace(\"\u0001\", \"\")\r\n        }\r\n    \r\n        return parsedMessage;\r\n    },\r\n}\r\n\r\nexport default chat","import chat from '@/methods/chat.js'\r\n\r\nexport default class Twitch {\r\n    constructor(channel) {\r\n        this.ws = null\r\n        this.IsDisconnected = false\r\n\r\n        this.channel = channel\r\n        this.channelID = null\r\n\r\n        this.OnUserId = null\r\n        this.OnPrivateMessage = null\r\n        this.OnClearChat = null\r\n        this.OnClearMessage = null\r\n    }\r\n\r\n    connect() {\r\n        if (this.IsDisconnected) {\r\n            return\r\n        }\r\n\r\n        this.ws = new WebSocket(\"wss://irc-ws.chat.twitch.tv:443\");\r\n        this.ws.onmessage = (e) => this.onMessage(e)\r\n        this.ws.onopen = () => this.onOpen()\r\n        this.ws.onerror = () => this.onError()\r\n        this.ws.onclose = () => this.onClose()\r\n    }\r\n\r\n    async onError() {\r\n        console.log(\"Connection error occured, disconnecting...\")\r\n        this.ws.close()\r\n    }\r\n\r\n    async onClose() {\r\n        console.log(\"Disconnected, attempting to reconnect...\")\r\n        this.IsDisconnected = true\r\n        setInterval(() => {\r\n            this.connect()\r\n        }, 1000);\r\n    }\r\n\r\n    async onOpen() {\r\n        console.log(\"1232132312\")\r\n        this.IsDisconnected = false;\r\n        this.ws.send(\"NICK justinfan1337\")\r\n        this.ws.send(\"JOIN #\" + this.channel.toLowerCase());\r\n        this.ws.send('CAP REQ :twitch.tv/tags twitch.tv/commands')\r\n    }\r\n\r\n    async onMessage(e) {\r\n        let messages = e.data.split(\"\\r\\n\")\r\n\r\n        messages.forEach(message => {\r\n          let payload = chat.parseMessage(message)\r\n          if (!payload) {\r\n            return\r\n          }\r\n\r\n          switch (payload.command.command) {\r\n              // announce - USERNOTICE\r\n              // нужно добавить реконнект\r\n              case \"CLEARCHAT\":\r\n                this.OnClearChat(payload)\r\n                // this.Messages = this.Messages.filter(item => item.source.nick !== payload.parameters)\r\n                break\r\n              case \"CLEARMSG\":\r\n                this.OnClearMessage(payload)\r\n                // this.Messages = this.Messages.filter(item => item.tags[\"id\"] !== payload.tags[\"target-msg-id\"])\r\n                break\r\n              case \"PRIVMSG\":\r\n                  if (this.channelID == null) {\r\n                    this.channelID = payload.tags[\"room-id\"]\r\n                    this.OnUserId(payload.tags[\"room-id\"])\r\n                  }\r\n                  this.OnPrivateMessage(payload)\r\n                  break;\r\n              case \"PING\":\r\n                  this.ws.send(`PONG ${payload.message}`)\r\n          }\r\n        })\r\n    }\r\n}","import { render } from \"./chat.vue?vue&type=template&id=b4d7adae\"\nimport script from \"./chat.vue?vue&type=script&lang=js\"\nexport * from \"./chat.vue?vue&type=script&lang=js\"\n\nimport \"./chat.vue?vue&type=style&index=0&id=b4d7adae&lang=css\"\n\nimport exportComponent from \"S:\\\\golang\\\\eblanchat3.0\\\\eblanchat\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["makeBuiltIn","defineProperty","module","exports","target","name","descriptor","get","getter","set","setter","f","anObject","that","this","result","hasIndices","global","ignoreCase","multiline","dotAll","unicode","unicodeSets","sticky","DESCRIPTORS","defineBuiltInAccessor","regExpFlags","fails","RegExp","RegExpPrototype","prototype","FORCED","INDICES_SUPPORT","error","O","calls","expected","addGetter","key","chr","Object","pairs","getOwnPropertyDescriptor","call","configurable","id","_createElementBlock","_Fragment","_renderList","$data","mes","_createBlock","_component_ChatMessage","Emotes","GlobalBadges","Paints","OtherBadges","defaultColors","payload","BG","class","badge","_createElementVNode","src","Url","toLowerCase","source","nick","HavePaints","style","color","$options","backgroundImage","_hoisted_3","_toDisplayString","_hoisted_4","Type","Text","ZeroWidth","__default__","data","EmotesBaseUrl","Paint","displayName","dot","Badges","paintsEnabled","$route","query","paints","shadowText","shadowtext","font_size","interpolateSize","interpbs","props","Array","String","created","async","command","tags","undefined","user","badges","value","entries","push","Users","includes","users","computed","Math","floor","random","length","userRGB","Common","backgroundRGB","userXYZ","ColourDistance","backgroundXYZ","distance","newColor","FinalMessage","TempMessage","parameters","f_mes","emotes","twitchEmotes","em","url","i","slice","Name","replace","ID","bgImage","ccsFunc","function","args","angle","shape","image_url","funcPrefix","repeat","stop","stops","at","join","filterText","filter","drop_shadows","map","v","x_offset","y_offset","radius","paintColor","badgeSize","parseInt","round","toString","emoteSize","messageSize","Font_Size","__exports__","Huita","channel","response","fetch","ok","console","log","json","vers","finalVersions","user_id","subscriber","keys","badge_sets","urls","flags","code","EventAPI","constructor","set_id","onDelete","onAdd","onRename","ws","Connect","WebSocket","onmessage","e","onMessage","subscribeToEvent","event","cond","message","send","JSON","stringify","parse","op","d","type","body","pulled","item","pushed","updated","parseTags","tagsToIgnore","dictParsedTags","parsedTags","split","forEach","tag","parsedTag","tagValue","dict","pair","badgeParts","dictEmotes","emote","emoteParts","textPositions","positions","position","positionParts","startPosition","endPosition","emoteSetIds","hasOwnProperty","parseCommand","rawCommandComponent","parsedCommand","commandParts","isCapRequestEnabled","parseSource","rawSourceComponent","sourceParts","host","parseParameters","rawParametersComponent","idx","trim","paramsIdx","indexOf","botCommand","botCommandParams","chat","parseMessage","parsedMessage","rawTagsComponent","endIdx","Twitch","IsDisconnected","channelID","OnUserId","OnPrivateMessage","OnClearChat","OnClearMessage","connect","onopen","onOpen","onerror","onError","onclose","onClose","close","setInterval","messages","components","ChatMessage","EventApi","altBG","altbg","background","BG2","useEventAPI","eventapi","currBG","client","Messages","window","scrollTo","document","scrollHeight","shift","methods","onEmoteDelete","old_value","onEmoteAdd","onEmoteRename","subs","apis","stv","concat","minus","gray","onUserID","userid","gb","bp","unshift","render"],"sourceRoot":""}